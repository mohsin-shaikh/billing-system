/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Invoice, // @ts-ignore
  InvoiceItem, // @ts-ignore
  Customer,
} from "@prisma/client";

export class InvoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.InvoiceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceCountArgs>
  ): Promise<number> {
    return this.prisma.invoice.count(args);
  }

  async invoices<T extends Prisma.InvoiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceFindManyArgs>
  ): Promise<Invoice[]> {
    return this.prisma.invoice.findMany(args);
  }
  async invoice<T extends Prisma.InvoiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceFindUniqueArgs>
  ): Promise<Invoice | null> {
    return this.prisma.invoice.findUnique(args);
  }
  async createInvoice<T extends Prisma.InvoiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceCreateArgs>
  ): Promise<Invoice> {
    return this.prisma.invoice.create<T>(args);
  }
  async updateInvoice<T extends Prisma.InvoiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceUpdateArgs>
  ): Promise<Invoice> {
    return this.prisma.invoice.update<T>(args);
  }
  async deleteInvoice<T extends Prisma.InvoiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InvoiceDeleteArgs>
  ): Promise<Invoice> {
    return this.prisma.invoice.delete(args);
  }

  async findInvoiceItems(
    parentId: string,
    args: Prisma.InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.prisma.invoice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceItems(args);
  }

  async getCustomerId(parentId: string): Promise<Customer | null> {
    return this.prisma.invoice
      .findUnique({
        where: { id: parentId },
      })
      .customerId();
  }
}
